package cn.abl.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import cn.abl.dao.CCustomerInformationMapper;
import cn.abl.dao.CCustomerInformationMapperCustom;
import cn.abl.dao.UUserMapper;
import cn.abl.dao.UUserMapperCustom;
import cn.abl.pojo.CCustomerInformation;
import cn.abl.pojo.UUser;
import cn.abl.pojo.UUserExample;
import cn.abl.pojo.UUserExample.Criteria;
import cn.abl.service.CustomerService;
import cn.abl.utils.E3Result;
import cn.abl.utils.PageBean;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	private CCustomerInformationMapperCustom cCustomerInformationMapperCustom;
	@Autowired
	private CCustomerInformationMapper cCustomerInformationMapper;
	@Autowired
	private UUserMapperCustom uuserMapperCustom;
	@Autowired
	private UUserMapper UUserMapper;
	
	@Override
	public PageBean getAllCustomer(int page, int limit, CCustomerInformation cCustomerInformation, String userID) {
		PageHelper.startPage(page, limit);
		cCustomerInformation.setCreateId(userID);
		List<CCustomerInformation> allCustomerList = cCustomerInformationMapperCustom.getAllCustomer(cCustomerInformation);
		PageInfo<CCustomerInformation> pageInfo = new PageInfo<>(allCustomerList);
		List<CCustomerInformation> list = pageInfo.getList();
		long total = pageInfo.getTotal();
		PageBean pageBean = new PageBean();
		pageBean.setList(list);
		pageBean.setTotal(total);
		return pageBean;
	}

	@Override
	public CCustomerInformation getCustomerByID(String id) {
		CCustomerInformation customerInformation = cCustomerInformationMapper.selectByPrimaryKey(Integer.valueOf(id));
		return customerInformation;
	}

	@Override
	public E3Result updateCustomer(CCustomerInformation cCustomerInformation, String userID) {
		if (cCustomerInformation.getId() != null) { //修改
			cCustomerInformation.setCreateId(userID);
			cCustomerInformation.setCreateTime(new Date());
			int i = cCustomerInformationMapper.updateByPrimaryKeySelective(cCustomerInformation);
			if (0 == i) {
				return E3Result.build(400, "修改失败!");
			}
		} else {
			cCustomerInformation.setCreateId(userID);
			cCustomerInformation.setCreateTime(new Date());
			int i = cCustomerInformationMapper.insertSelective(cCustomerInformation);
			if (0 == i) {
				return E3Result.build(400, "新增客户信息失败!");
			}
			UUserExample example = new UUserExample();
			Criteria criteria = example.createCriteria();
			criteria.andUserNameEqualTo(cCustomerInformation.getUserName());
			List<UUser> list = UUserMapper.selectByExample(example);
			if (list.size() > 0 && null == list) {
				return E3Result.build(400, "用户名被占用!");
			} else {
				UUser user = new UUser(); // 新增新用户
				user.setUserName(cCustomerInformation.getUserName());
				user.setCreateTime(new Date());
				user.setStatus(1);
				String md5PW = DigestUtils.md5DigestAsHex(user.getPassWord().getBytes());
				user.setPassWord(md5PW);
				user.setUserType(2);
				int k = uuserMapperCustom.insertUser(user);
				user.setDataPrivilege(String.valueOf(user.getId()));
				int j = UUserMapper.updateByPrimaryKeySelective(user);
				return j > 0 ? E3Result.ok() : E3Result.build(400, "新增用户失败!");
			}
		}
		return E3Result.ok();
	}

	@Override
	public E3Result delete(String ids) {
		int i = cCustomerInformationMapperCustom.delete(ids);
		if (0 == i) {
			return E3Result.build(400, "删除失败!");
		}
		return E3Result.ok();
	}

}
